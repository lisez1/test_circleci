##### Symphony configuration ######
ConfigSource=File
ServiceBasePath=Symphony/ServiceConfiguration
FileConfigSourceLocation=/opt/symphony/keymanager/conf/keymanager_config.json


##### Embedded server configuration #####
server.tomcat.accesslog.enabled=true
server.tomcat.max-threads=2000

# Trust store that holds SSL certificates that must be trusted by KeyManager
# Comment out the following two lines to usa Java's default trust store (cacerts)
server.ssl.trust-store=/opt/symphony/keymanager/certs/truststore
server.ssl.trust-store-password=changeit

# Key store that holds the KeyManager server SSL certificate
# Certificate alias must be 'tomcat' and its password must match the keystore's password.
server.ssl.key-store=/opt/symphony/keymanager/certs/keystore
server.ssl.key-store-password=changeit

# Force usage of TLS 1.2 only
server.ssl.enabled=true
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2

# Adds the "Secure" flag for the session cookie.
server.session.cookie.secure=true

# Defines the maximum size in bytes of the HTTP message header
server.max-http-header-size=66560

# Makes KeyManager receive requests from the "/relay" base path
server.context-path=/relay

# Requests incoming from this port will be redirected to KeyManager.
# Make sure this port matches your network configuration for KeyManager
server.port=8443



##### Custom properties for KeyAuth #####
# KeyAuth is another web application executed from within KeyManager application.
# It is used by clients that perform certificate-based authentication - usually Bots.

# Makes KeyAuth receive requests from the "/keyauth" base path
server.bot.context-path=/keyauth

# Requests incoming from this port will be redirected to KeyAuth
# Make sure this port matches your network configuration for KeyManager
server.bot.port=8444

# Enable TLS with the same protocol settings specified in the server.ssl.* properties above
server.bot.ssl.client-auth=true
